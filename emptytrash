#! /bin/bash

#HELP00:           Script Name:  emptytrash
#HELP01:               Purpose:  empty stubborn trash bin with the power of sudo
#HELP02:                 Owner:  David Eisenhardt
#HELP03:               License:  GPL v3
#HELP04:               Created:  2004
#HELP05:              Category:  system utilities
#HELP06:            Input File:  stdin
#HELP07:           Output File:  stdout
#HELP08:              Log path:  na
#HELP09:                Syntax:  sudo emptytrash
#HELP10:               Example:  sudo emptytrash
#HELP11:              Commands:  kill, rm
#HELP12:      Production Files:  ~/.Trash
#HELP13:    Ancillary Programs:  finder
#HELP14:     Ancillary Scripts:  na
#HELP15:         Local Scripts:  no dependencies
#HELP16: crontask/systemd srvc:  na
#HELP17: task/service schedule:  na
#HELP18:        Kernel Version:  Darwin >8.0
#HELP19:            DB Version:  na
#HELP20:            Audit Date:  
#HELP21:               Auditor:
#HELP22:       Approve Date(s):
#HELP23:           Approver(s):
#HELP24: Date Checked Into CVS:
#HELP25:   Checked Into CVS By:
#HELP26:               Version:  1.2
#HELP27:               Changes:  formatting
#HELP28:            Github url:  https://github.com/deisenhardt/emptytrash/
#HELP29:
#HELP30:

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Exit codes !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# 3 help/usage and/or not sudo

#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
# Define functions {}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}
#{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}

usage() {
  printf "\n Usage: sudo emptytrash \
          \n\n If Finder cannot empty trash, sudo can. Useful for messages like the following \
          \n\n “Trash” can’t be opened right now because it’s being used by another task, \
          \n such as moving or copying an item or emptying the Trash. Try again when the \
          \n current task is complete. \
          \n\t\t Skip Stop Continue "
}

sudo_check() {
  if [ "$(id -u)" -ne 0 ]; then
    printf "\n\t$0 must be run as sudo\n\n"
    usage && exit 3
  else
    sudook=1
  fi
}

kill_trash_pid() {

  # two possible approaches: for or while loop
  # the tr puts all pids on one line, for the for loop
  # otherwise we would echo | read -r while; do; done

  pids=$(lsof | grep Trash | awk '{print $2}' | sort -u | tr "\n" " ")
  #pids=$(lsof | grep Trash | awk '{print $2}' | sort -u)

  # since wc -w outputs whitespace before its numeric value
  # we can't do arithmetic unless we take the value without the whitespace
  pidcount=$(echo "$pids" | wc -w | awk '{print $1}')

  if (( "$pidcount" == 0 )); then
    printf "no PIDs to kill\n" 
    nopids=1
  elif (( "$pidcount" == 1 )); then
    printf "killing PID $pids\n"
  else 
    # we know wc -w will not output a negative or non-numeric value
    # so we don't need any more maths

    printf "killing PIDs \n$pids\n"
  fi

  # echo "$pids" |
  # while read pid ; do
  #   kill -9 $pid
  # done

 if [ -z "$nopids" ]; then
    for pid in "$pids" ; do
      kill -9 $pid
    done
  fi

  printf "\n Trash should be empty now, unless any Trash dialogue remains open. \
          \n Otherwise, Trash should be empty once all dialogues are closed \n\n"
}

##############################################################
# main program ###############################################
##############################################################

sudo_check

kill_trash_pid

rm -rf ~/.Trash/*

##############################################################
# End ########################################################
##############################################################
